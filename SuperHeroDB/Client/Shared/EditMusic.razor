@inject IMusicService MusicService
@inject IJSRuntime JSRuntime
@inject IStringLocalizer<EditMusic> Localizer
@using BootstrapBlazor.Components;

@if (Music.Id == Guid.Empty)
{
    <h3>Create a new music</h3>
}
else
{
    <h3>Edit '@Music.Name'</h3>
}

<EditForm Model="Music" OnSubmit="HandleSubmit">
    <div class="form-group">
        <label>Name</label>
        <InputText @bind-Value="Music.Name" class="form-control"></InputText>
    </div>
    <div class="form-group">
        <label>Music Address</label>
        <InputText @bind-Value="Music.MusicAddress" class="form-control"></InputText>
    </div>
    <div class="form-group">
        <label>Picture Address</label>
        <InputText @bind-Value="Music.PictureAddress" class="form-control"></InputText>
    </div>

    <p>In this example, the search callback delegate method is set <code>onSearchTextChanged</code> to customize search results if the display text is used internally to make a fuzzy match when not set</p>

    @*<MultiSelect Items="@ItemSingers" @bind-Value="@SingersValue" ShowSearch="true" OnSearchTextChanged="@OnSearch"></MultiSelect>*@



    @*<div class="form-group">
            <label>Comic</label><br />
            <InputRadioGroup @bind-Value="music.MusicInformation.Singers" class="form-control">
                @foreach (var comic in MusicService.Singers)
                {
                    <InputRadio Value="@comic.Id" /><span style="padding-left: 5px;">@comic.Name</span><br />
                }
            </InputRadioGroup>
        </div>*@
    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

@code {
    [Parameter]
    public SuperHeroDB.Shared.Music MusicToEdit { get; set; }

    [Parameter]
    public SuperHeroDB.Shared.Music Music { get; set; } = new SuperHeroDB.Shared.Music();


    public List<SelectedItem> ItemSingers { get; set; } = new List<SelectedItem>();


    int comicId = 1;

    private string SingersValue { get; set; } = "";


    private static List<SelectedItem> GenerateDataSource(List<Singer> source)
    {
        return source.Select(i => new SelectedItem(i.Id.ToString(), i.Name)).ToList();
    }


    protected override async Task OnParametersSetAsync()
    {
        await MusicService.GetSingers();
        ItemSingers = GenerateDataSource(MusicService.Singers);
        //comicId = music.ComicId;
    }

    private List<SelectedItem> OnSearch(string searchText)
    {
        return GenerateDataSource(MusicService.Singers.Where(i => i.Name.Contains(searchText, System.StringComparison.OrdinalIgnoreCase)).ToList());
    }


    async void HandleSubmit()
    {
        //music.Comic = null;
        //music.ComicId = comicId;

        await JSRuntime.InvokeVoidAsync("console.log", Music);

        if (Music.Id == Guid.Empty)
        {
            await MusicService.CreateMusic(Music);
        }
        else
        {
            await MusicService.UpdateMusic(Music, Music.Id);
        }

    }
}
